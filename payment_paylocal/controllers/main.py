import json, logging, pprint
from odoo import http
from odoo.exceptions import ValidationError
from odoo.http import request

from odoo.addons.payment import utils as payment_utils

_logger = logging.getLogger(__name__)


class PaylocalController(http.Controller):

    @http.route('/payment/paylocal/get_acquirer_info', type='json', auth='public')
    def paylocal_get_acquirer_info(self, acquirer_id):
        """ Return public information on the acquirer.

        :param int acquirer_id: The acquirer handling the transaction, as a `payment.acquirer` id
        :return: Information on the acquirer, namely: the state, payment method type, login ID, and
                 public client key
        :rtype: dict
        """
        acquirer_paylocal = request.env['payment.acquirer'].sudo().browse(acquirer_id).exists()
        acquirer_paylocal._paylocal_ensure_authenticated()

        merchant_config = acquirer_paylocal.paylocal_get_merchant_config()
        merchant_config = json.loads(merchant_config['config'])

        url = acquirer_paylocal.paylocal_api_url.rstrip('/')
        return {
            'state': acquirer_paylocal.state,
            'headlessClientConfig': {
                'config': merchant_config,
                'accessToken': acquirer_paylocal.paylocal_get_client_jwt_token(),
                'merchantGatewayId': acquirer_paylocal.paylocal_merchant_gateway,
                'pluginModuleUrl': merchant_config['pluginModuleUrl'],
                'paylocalApi': url
            }
        }

    @http.route('/payment/paylocal/payment', type='json', auth='public')
    def charge_payment(self, reference, partner_id, access_token, paylocal_data, masked_data):
        """ Make a payment request and handle the response.

        :param str reference: The reference of the transaction
        :param int partner_id: The partner making the transaction, as a `res.partner` id
        :param str access_token: The access token used to verify the provided values
        :param str paylocal_data: The paymentMethod data generated by the gateway
        :return str: Payment Response
        """
        # Check that the transaction details have not been altered
        if not payment_utils.check_access_token(access_token, reference, partner_id):
            raise ValidationError("PayLocal: Received tampered payment request data.")

        # Make the payment request to PayLocal
        tx_sudo = request.env['payment.transaction'].sudo().search([('reference', '=', reference)])
        response_content = tx_sudo._paylocal_create_transaction_request(paylocal_data, masked_data)

        _logger.info("make payment response:\n%s", pprint.pformat(response_content))

        tx_sudo._handle_feedback_data('paylocal', {'reference': tx_sudo.reference, 'response': response_content})
