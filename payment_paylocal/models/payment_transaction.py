from odoo import api, fields, models, _
from odoo.exceptions import UserError, ValidationError
from odoo.addons.payment import utils as payment_utils
import logging, pprint

_logger = logging.getLogger(__name__)


class PaymentTransaction(models.Model):
    _inherit = 'payment.transaction'

    def _get_specific_processing_values(self, processing_values):
        """
        :param dict processing_values: The generic processing values of the transaction
        :return: The dict of acquirer-specific processing values
        :rtype: dict
        """
        res = super()._get_specific_processing_values(processing_values)
        if self.provider != 'paylocal':
            return res

        return {
            'access_token': payment_utils.generate_access_token(processing_values['reference'], processing_values['partner_id'])
        }

    def _paylocal_create_transaction_request(self, paylocal_data, masked_data):
        """
        Create a paymentMethod using the supplied card token, then charge

        :param dict paylocal_data: The paymentMethod data generated by the gateway
        :return:
        """
        self.ensure_one()

        # Charge paymentMethod
        charge_data = {
            'merchantGatewayId': self.acquirer_id.paylocal_merchant_gateway,
            'token': paylocal_data['gatewayToken'],
            'amount': self.amount,
            'orderId': f"odoo_transaction_{self.id}"
        }
        paylocal_transaction = self.acquirer_id._paylocal_make_request(
            method="POST",
            endpoint=f"/transaction/charge",
            payload=charge_data
        )

        self.reference = paylocal_transaction['id']

        return paylocal_transaction

    @api.model
    def _get_tx_from_feedback_data(self, provider, data):
        """ Find the transaction based on the feedback data.

        :param str provider: The provider of the acquirer that handled the transaction
        :param dict data: The feedback data sent by the acquirer
        :return: The transaction if found
        :rtype: recordset of `payment.transaction`
        """
        tx = super()._get_tx_from_feedback_data(provider, data)
        if provider != 'paylocal':
            return tx

        reference = data.get('reference')
        tx = self.search([('reference', '=', reference), ('provider', '=', 'paylocal')])
        if not tx:
            raise ValidationError(
                "PayLocal: " + _("No transaction found matching reference %s.", reference)
            )
        return tx

    def _process_feedback_data(self, data):
        """ Override of payment to process the transaction based on PayLocal data.

        Note: self.ensure_one()

        :param dict data: The feedback data sent by the provider
        :return: None
        """
        super()._process_feedback_data(data)
        if self.provider != 'paylocal':
            return

        response_content = data.get('response')

        self.acquirer_reference = response_content.get('transactionReference')
        status_code = response_content.get('status', 'error')
        if status_code == 'successful':  # Approved
            status_type = response_content.get('action').lower()
            if status_type in ('charge'):
                self._set_done()
                # if self.tokenize and not self.token_id:  # TODO
                #     self._paylocal_tokenize()
            # TODO: elif 'authorize' elif 'void
        # TODO: elif 'declined' elif 'pending'
        else:  # Error / Unknown code
            error_code = response_content.get('status')
            _logger.info(
                "received data with invalid status code %s and error code %s",
                status_code, error_code
            )
            self._set_error(
                "PayLocal: " + _(
                    "Received data with status code \"%(status)s\" and error code \"%(error)s\"",
                    status=status_code, error=error_code
                )
            )
